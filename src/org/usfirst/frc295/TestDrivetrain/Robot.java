// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc295.TestDrivetrain;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc295.TestDrivetrain.commands.*;
import org.usfirst.frc295.TestDrivetrain.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot 
{

    Command autonomousCommand;
    SendableChooser chooser;

    // Operator Interface from OJ.java 
    public static OI oi;

    // MAJOR SYSTEMS
    public static SysDriveTrainVictorSP sysDriveTrain;



    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() 
    {
        RobotMap.init();

        // Instantiate Subsystems needed by the OI
        //This line of code is for the forkliftbot
        sysDriveTrain = new SysDriveTrainVictorSP();
        //This line of code is for the protobot
        //sysDriveTrain = new SysDriveTrain();

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // TODO: Need to know how SendableChooer work
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", new AutonomousCommand());
        //chooser.addObject("My Auto", new MyAutoCommand());
        SmartDashboard.putData("Auto mode", chooser);
        
        // Show what command your subsystem is running on the SmartDashboard
        SmartDashboard.putData(sysDriveTrain);
    }


    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit()
    {

    }


    public void disabledPeriodic() 
    {
        Scheduler.getInstance().run();
    }


	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString code to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional commands to the chooser code above (like the commented example)
	 * or additional comparisons to the switch structure below with additional strings & commands.
	 */
    public void autonomousInit() 
    {
        // Instantiate the command used for the autonomous period
        autonomousCommand = new AutonomousCommand();
        
        // TODO: How does the chooser work?
        // autonomousCommand = (Command) chooser.getSelected();
        
        // TODO: How does the SmartDashboard.getString work?
		/* String autoSelected = SmartDashboard.getString("Auto Selector", "Default");
		switch(autoSelected) {
		case "My Auto":
			autonomousCommand = new MyAutoCommand();
			break;
		case "Default Auto":
		default:
			autonomousCommand = new ExampleCommand();
			break;
		} */
        
        
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }


    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() 
    {
        Scheduler.getInstance().run();
        log();
    }


    public void teleopInit() 
    {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }


    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() 
    {
        Scheduler.getInstance().run();
        log();
        System.out.println("In teleopPeriodic");
    }


    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() 
    {
        LiveWindow.run();
    }

    /**
	 * The log method puts interesting information to the SmartDashboard.
	 */
    private void log() 
    {
        sysDriveTrain.logToSmartDashboard();
    }

}
